---
- name: Create service directories
  file:
    path: "{{ item.dest | default(item.path) | default(item) }}"
    state: directory
    owner: "{{ item.owner | default(item.user) | default(openssl__user) }}"
    group: "{{ item.group | default(openssl__group) }}"
    mode: "{{ item.mode | default(openssl__dir_mode) }}"
  loop: "{{ openssl__directories }}"

- name: Create configuration files
  template:
    src: "{{ item.dest | default(item.path) | default(item) | regex_replace('^.', '') }}"
    dest: "{{ item.dest | default(item.path) | default(item) }}"
    owner: "{{ item.owner | default(item.user) | default(openssl__user) }}"
    group: "{{ item.group | default(openssl__group) }}"
    mode: "{{ item.mode | default(openssl__file_mode) }}"
  loop: "{{ openssl__files }}"

- name: Generate a Self Signed OpenSSL certificate
  command:
    cmd: openssl req -batch -newkey rsa:{{ openssl__default_bits }} -nodes -keyout {{ openssl__tls_certificate_key }} -x509 -days {{ openssl__default_days }} -out {{ openssl__tls_certificate }}
    creates: "{{ openssl__tls_certificate_key }}"

- name: Copy certificate files
  copy:
    src: "{{ openssl__certs_dir | regex_replace('^.', '') }}/{{ item.filename | default(item | regex_replace ('^.*/', '')) }}"
    dest: "{{ openssl__certs_dir }}/{{ item.filename | default(item | regex_replace ('^.*/', '')) }}"
    owner: root
    group: root
    mode: '0640'
  loop: "{{ openssl__certificates }}"
  when: not openssl__get_certificates_from_origin

- name: Download certificate files
  uri:
    url: "{{ item.url | default(item) }}"
    dest: "{{ openssl__certs_dir }}"
    creates: "{{ openssl__certs_dir }}/{{ item.filename | default(item | regex_replace ('^.*/', '')) }}"
    force: yes
    owner: root
    group: root
    mode: '0640'
    follow_redirects: true
    validate_certs: "{{ openssl__validate_certs }}"
  loop: "{{ openssl__certificates }}"
  when: 
    - openssl__get_certificates_from_origin
    - "'.zip' not in item.url | default(item)"

- name: Extract archived certificates
  unarchive:
    remote_src: true
    src: "{{ item.url | default(item) }}"
    dest: "{{ openssl__certs_dir }}"
    creates: "{{ openssl__certs_dir }}/{{ item.filename | default(item | regex_replace ('^.*/', '')) }}"
    owner: root
    group: root
    mode: '0640'
    validate_certs: "{{ openssl__validate_certs }}"
  loop: "{{ openssl__certificates }}"
  when: 
    - openssl__get_certificates_from_origin
    - "'.zip' in item.url | default(item)"